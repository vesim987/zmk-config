/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC           &kp N1       &kp N2       &kp N3          &kp N4      &kp N5                        &kp N6  &kp N7      &kp N8      &kp N9       &kp N0          &kp GRAVE
&kp TAB           &kp Q        &kp W        &kp E           &kp R       &kp T                         &kp Y   &kp U       &kp I       &kp O        &kp P           &kp MINUS
&kp LCTRL         &mt A LSHFT  &mt S LCTRL  &mt D LEFT_GUI  &mt F LALT  &kp G                         &kp H   &mt J RALT  &mt K RGUI  &mt L RCTRL  &mt SEMI RSHFT  &kp SQT
&kp LEFT_BRACKET  &kp Z        &kp X        &kp C           &kp V       &kp B   &none        &none    &kp N   &kp M       &kp COMMA   &kp DOT      &kp FSLH        &kp RIGHT_BRACKET
                                            &kp LALT        &kp LGUI    &mo 1   &kp SPACE    &kp RET  &mo 2   &kp BSPC    &kp RGUI
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none      &none             &none              &none              &none       &none                        &trans     &trans     &trans     &trans    &trans    &trans
&kp F1     &kp F2            &kp F3             &kp F4             &kp F5      &kp F6                       &kp F7     &kp F8     &kp F9     &kp F10   &kp F11   &kp F12
&kp GRAVE  &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR  &kp PRCNT                    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp TILDE
&trans     &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans      &trans     &trans    &trans  &trans     &kp MINUS  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE
                                                &trans             &trans      &trans     &trans    &trans  &trans     &trans     &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none      &none   &none   &none    &none    &none                    &none        &none      &none      &none     &none      &none
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                   &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &none
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                   &none        &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &none
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &none    &none  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &none    &none    &none    &none    &none  &none        &none      &none
            >;
        };

        adjust_layer {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none  &none       &none  &none  &none  &bt BT_CLR
&none  &none         &none         &none         &none         &none                         &none  &none       &none  &none  &none  &none
&none  &none         &none         &none         &bt BT_PRV    &none                         &none  &bt BT_NXT  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none         &none    &none  &none  &none       &none  &none  &none  &none
                                   &none         &none         &none         &none    &none  &none  &none       &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        AFJUST {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
