/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#include "chords/key_locatins.dtsi"

#define LAYER_EN 0
#define LAYER_PL 5
#define LAYER_LOWER 1
#define LAYER_RISER 2
#define LAYER_ADJUST 3

#define COMBO_TIMEOUT 200
#define MACRO_TAP 10
#define MACRO_WAIT 0
/ {
    macros {
#include "./chords/en/macros.dtsi"
    };

    combos {
        compatible = "zmk,combos";
#include "./chords/en/combos.dtsi"
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LAYER_LOWER LAYER_RISER>;
            then-layer = <LAYER_ADJUST>;
        };
    };



	keymap {
		compatible = "zmk,keymap";

		default_layer {
      label = "default";
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  SHIFT|  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// |  CTRL |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | RALT  |

			bindings = <
&kp ESC   &kp N1     &kp N2     &kp N3      &kp N4      &kp N5                     &kp N6 &kp N7      &kp N8      &kp N9     &kp N0        &kp GRAVE
&kp TAB   &kp Q      &kp W      &kp E       &kp R       &kp T                      &kp Y  &kp U       &kp I       &kp O      &kp P         &kp MINUS
&kp LSHFT &mt LGUI A &mt LALT S &mt LSHFT D &mt LCTRL F &kp G                      &kp H  &mt RCTRL J &mt RSHFT K &mt RALT L &mt RGUI SEMI &kp SQT
&kp LCTRL &kp Z      &kp X      &kp C       &kp V       &kp B  &kp LBKT   &kp RBKT &kp N  &kp M       &kp COMMA   &kp DOT    &kp FSLH      &kp RSHFT
                                &kp LALT    &kp LGUI    &mo 1  &kp SPACE  &kp RET  &mo 2  &kp BSPC    &kp RALT
			>;
		};

		lower_layer {
      label = "lower";
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
			bindings = <
&trans    &trans   &trans &trans        &trans     &trans                      &trans    &trans      &trans          &trans    &trans    &trans
&kp F1    &kp F2   &kp F3 &kp F4        &kp F5     &kp F6                      &kp F7    &kp F8      &kp F9          &kp F10   &kp F11   &kp F12
&kp GRAVE &kp EXCL &kp AT &kp HASH      &kp DOLLAR &kp PRCNT                   &kp CARET &kp AMPS    &kp KP_MULTIPLY &kp LPAR  &kp RPAR  &kp TILDE
&trans    &trans   &trans &trans &trans &trans     &trans    &trans     &trans &kp MINUS &kp KP_PLUS &kp LBRC        &kp RBRC  &kp PIPE
                          &trans &trans &trans     &trans    &trans     &trans &trans    &trans
			>;
		};

		raise_layer {
      label = "raise";
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
			bindings = <
&trans    &trans &trans &trans  &trans  &trans                       &trans      &trans    &trans    &trans   &trans    &trans
&kp GRAVE &kp N1 &kp N2 &kp N3  &kp N4  &kp N5                       &kp N6      &kp N7    &kp N8    &kp N9   &kp N0    &trans
&kp F1    &kp F2 &kp F3 &kp F4  &kp F5  &kp F6                       &trans      &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT &trans
&kp F7    &kp F8 &kp F9 &kp F10 &kp F11 &kp F12   &trans   &trans    &kp KP_PLUS &kp MINUS &kp EQUAL &kp LBKT &kp RBKT  &kp BSLH
                        &trans  &trans  &trans    &trans   &trans    &trans      &trans    &trans
			>;

		adjust_layer {
      label = "adjust";
// ------------------------------------------------------------------------------------------------------------
// | BTC | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       | PW_ON | PW_OF | PW_TG |
// |     |     |     |      |      |      |                   |      |       |       |       |       |       |
// |     |     |     |      |      |      |                   |      |       |       |       |       |       |
// |     |     |     |      |      |      |                   |      |       |       |       |       |       |
//                   |      |      |      |        |  |       |      |       |       |
			bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                 &trans &trans &trans &ext_power EP_ON &ext_power EP_OFF &ext_power EP_TOG
&trans     &trans       &trans       &trans       &trans       &trans                       &trans &trans &trans &trans           &trans            &trans
&trans     &trans       &trans       &trans       &trans       &trans                       &trans &trans &trans &trans           &trans            &trans
&trans     &trans       &trans       &trans       &trans       &trans                       &trans &trans &trans &trans           &trans            &trans
                                     &trans       &trans       &trans    &trans   &trans    &trans &trans &trans
			>;
		};
		};
	};
};

